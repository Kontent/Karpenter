Fx.RegPoint={TopLeft:{x:0,y:0},Top:{x:0.5,y:0},TopRight:{x:1,y:0},Left:{x:0,y:0.5},Center:{x:0.5,y:0.5},Right:{x:1,y:0.5},BottomLeft:{x:0,y:1},Bottom:{x:0.5,y:1},BottomRight:{x:1,y:1}};Fx.Morpher=new Class({Extends:Fx.CSS,options:{path:null,regpoint:Fx.RegPoint.TopLeft,usepath:["top","left"]},initialize:function(element,options){this.element=this.subject=$(element);this.parent(options)},set:function(now){if(typeof now=="string"){now=this.search(now)}for(var p in now){this.render(this.element,p,now[p],this.options.unit)}return this},getRegistration:function(val,axis){},translate:function(value,axis,from){var prop=(axis=="x"?"width":"height");var result=parseInt((value-(parseInt(this.element.getStyle(prop))*this.options.regpoint[axis])));var computed=[{value:result,parser:from[0].parser}];computed.$family={name:"fx:css:value"};return computed},compute:function(from,to,delta){var now={};var x,y;var path=(this.options.path?this.options.path:false);for(var p in from){if(path&&this.options.usepath.contains(p)){var coords=path.getCoordinates(1-delta);if(p=="left"){x=coords?coords.x:null}if(p=="top"){y=coords?coords.y:null}}switch(p){case"left":now[p]=(path?this.translate(x,"x",from[p]):this.parent(from[p],to[p],delta));break;case"top":now[p]=(path?this.translate(y,"y",from[p]):this.parent(from[p],to[p],delta));break;case"width":now[p]=this.parent(from[p],to[p],delta);break;case"height":now[p]=this.parent(from[p],to[p],delta);default:now[p]=this.parent(from[p],to[p],delta)}}return now},start:function(properties,paused){if(!properties){properties={}}if(!this.check(arguments.callee,properties)){return this}if(typeof properties=="string"){properties=this.search(properties)}var usepath=this.options.usepath;if(this.options.path&&usepath.length){if(usepath.contains("top")){$extend(properties,{top:[0,1]})}if(usepath.contains("left")){$extend(properties,{left:[0,1]})}}var from={},to={};for(var p in properties){var parsed=this.prepare(this.element,p,properties[p]);from[p]=parsed.from;to[p]=parsed.to}return this.parent(from,to)}});Element.Properties.morpher={set:function(options){var morph=this.retrieve("morpher");if(morph){morph.cancel()}return this.eliminate("morpher").store("morpher:options",$extend({link:"cancel"},options))},get:function(options){if(options||!this.retrieve("morpher")){if(options||!this.retrieve("morpher:options")){this.set("morpher",options)}this.store("morpher",new Fx.Morpher(this,this.retrieve("morpher:options")))}return this.retrieve("morpher")}};Element.implement({morpher:function(props,paused){this.get("morpher").start(props,paused);return this}});Fx.BasePath=new Class({Implements:Options,options:{},initialize:function(options){this.setOptions(options)}});Fx.Path=new Class({Implements:Options,Extends:Fx.BasePath,options:{axis:"top",origin:{x:0,y:0}},initialize:function(segments,options){var params=Array.link(arguments,{segments:Array.type,options:Object.type});this.parent(params.options||{});this._segments=params.segments||[];this._blocksize=segments?(1/this._segments.length):0;this.setOrigin(this.options.origin)},addSegment:function(segment){segment.origin=this.options.origin;this._segments.push(segment);this._blocksize=(1/this._segments.length)},setOrigin:function(origin){this.setOptions({origin:origin});this._segments.each(function(el){el.offset=origin})},x:function(p){var seg=this.getSegment(p);var mapped=(((p%this._blocksize)*100)/this._blocksize)/100;return seg.x(mapped)},y:function(p){var seg=this.getSegment(p);var mapped=(((p%this._blocksize)*100)/this._blocksize)/100;return seg.y(mapped)},getCoordinates:function(p){var seg=this.getSegment(p);var mapped=(((p%this._blocksize)*100)/this._blocksize)/100;return seg?seg.getCoordinates(mapped):null},getSegment:function(p){var n=this._segments.length;var index=(n-Math.floor(p*n))-1;return this._segments[index]},plot:function(cb){this._segments.each(function(el){el.plot(cb)},this)}});var CubicBezier=new Class({initialize:function(p0,p1,c0,c1){this.x0=p0[0];this.y0=p0[1];this.x1=p1[0];this.y1=p1[1];this.cx0=c0[0];this.cy0=c0[1];this.cx1=c1[0];this.cy1=c1[1];this.offset={x:0,y:0};this.f1=function(t){return(t*t*t)};this.f2=function(t){return(3*t*t*(1-t))};this.f3=function(t){return(3*t*(1-t)*(1-t))};this.f4=function(t){return((1-t)*(1-t)*(1-t))}},x:function(p){return this.x0*this.f1(p)+this.cx0*this.f2(p)+this.cx1*this.f3(p)+this.x1*this.f4(p)},y:function(p){return this.y0*this.f1(p)+this.cy0*this.f2(p)+this.cy1*this.f3(p)+this.y1*this.f4(p)},getCoordinates:function(p){return{x:this.x(p)+this.offset.x,y:this.y(p)+this.offset.y}},getControls:function(){return{c0:{x:this.cx0,y:this.cy0},c1:{x:this.cx1,y:this.cy1}}},getStartEnd:function(){return{p0:{x:this.x0,y:this.y0},p1:{x:this.x1,y:this.y1}}},plot:function(cb){for(var i=0;i<1000;i++){cb(this.getCoordinates(i/1000),i)}}});var QuadBezier=new Class({Extends:CubicBezier,initialize:function(p0,p1,c){this.x0=p0[0];this.y0=p0[1];this.x1=p1[0];this.y1=p1[1];this.cx0=c[0];this.cy0=c[1];this.cx1=c[0];this.cy1=c[1];this.origin={x:0,y:0};this.f1=function(t){return(t*t*t)};this.f2=function(t){return(3*t*t*(1-t))};this.f3=function(t){return(3*t*(1-t)*(1-t))};this.f4=function(t){return((1-t)*(1-t)*(1-t))}}});